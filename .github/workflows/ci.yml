name: CI

on:
  push:
    branches:
      - "*"
    tags:
      - v*
  pull_request:
    branches:
      - master
  workflow_dispatch:
concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  CRATE_NAME: rip2

jobs:
  test:
    name: Test ${{ matrix.rust-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macOS-latest
          - windows-latest
        rust-version:
          - stable


    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust-version }}
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin
      - name: Test compilation
        run: cargo check --all --all-targets
      - name: Test formatting
        run: cargo fmt --all -- --check
      - name: Test clippy
        run: cargo clippy --all --all-targets -- -D warnings
      - name: Test documentation
        run: cargo doc --all --no-deps
      - name: Test with code coverage
        run: cargo tarpaulin --release --engine llvm --follow-exec --post-test-delay 10 --coveralls ${{ secrets.COVERALLS_REPO_TOKEN }}

  nix:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macOS-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check Nix flake inputs
        uses: DeterminateSystems/flake-checker-action@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v3
      - name: Build default package
        run: nix-build
      - name: Smoke test default package
        run: ./result/bin/rip --version
      - name: Test default app
        run: nix run . -- --help
      - name: Test shell completions
        run: |
          # pre-fetch bash-completion then get its path in the store
          nix build nixpkgs#bash-completion
          export BASH_COMPLETION_PKG=$(nix path-info nixpkgs#bash-completion)
          # use bashInteractive from nixpkgs because default bash is too old for bash-completion on macOS
          nix shell . nixpkgs#expect nixpkgs#bash-completion nixpkgs#bashInteractive -c tests/shell_completions.exp

  release-please:
    name: Execute release chores

    permissions:
      contents: write
      pull-requests: write

    runs-on: ubuntu-latest
    needs: [test, nix]

    outputs:
      created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}

    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          release-type: rust
          manifest-file: .release-please-manifest.json

  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: release-please
    if: needs.release-please.outputs.created

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2
      - name: Publish
        run: cargo publish --verbose --locked --no-verify --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  packaging:
    name: packaging-${{ matrix.platform.target }}
    runs-on: ${{ matrix.platform.os }}
    needs:
      - release-please
      - publish
    strategy:
      fail-fast: false
      matrix:
        platform:
          # From https://github.com/houseabsolute/precious/blob/master/.github/workflows/ci.yml
          - os_name: FreeBSD-x86_64
            os: ubuntu-20.04
            target: x86_64-unknown-freebsd
            bin: rip
            name: rip-FreeBSD-x86_64.tar.gz
            skip_tests: true
          - os_name: Linux-x86_64
            os: ubuntu-20.04
            target: x86_64-unknown-linux-musl
            bin: rip
            name: rip-Linux-x86_64-musl.tar.gz
          - os_name: Linux-aarch64
            os: ubuntu-20.04
            target: aarch64-unknown-linux-musl
            bin: rip
            name: rip-Linux-aarch64-musl.tar.gz
            skip_tests: true
          - os_name: Linux-arm
            os: ubuntu-20.04
            target: arm-unknown-linux-musleabi
            bin: rip
            name: rip-Linux-arm-musl.tar.gz
            skip_tests: true
          - os_name: Linux-i686
            os: ubuntu-20.04
            target: i686-unknown-linux-musl
            bin: rip
            name: rip-Linux-i686-musl.tar.gz
            skip_tests: true
          - os_name: Linux-powerpc
            os: ubuntu-20.04
            target: powerpc-unknown-linux-gnu
            bin: rip
            name: rip-Linux-powerpc-gnu.tar.gz
            skip_tests: true
          - os_name: Linux-powerpc64
            os: ubuntu-20.04
            target: powerpc64-unknown-linux-gnu
            bin: rip
            name: rip-Linux-powerpc64-gnu.tar.gz
            skip_tests: true
          - os_name: Linux-powerpc64le
            os: ubuntu-20.04
            target: powerpc64le-unknown-linux-gnu
            bin: rip
            name: rip-Linux-powerpc64le.tar.gz
            skip_tests: true
          # - os_name: Linux-riscv64
          #   os: ubuntu-20.04
          #   target: riscv64gc-unknown-linux-gnu
          #   bin: rip
          #   name: rip-Linux-riscv64gc-gnu.tar.gz
          - os_name: Linux-s390x
            os: ubuntu-20.04
            target: s390x-unknown-linux-gnu
            bin: rip
            name: rip-Linux-s390x-gnu.tar.gz
            skip_tests: true
          # - os_name: NetBSD-x86_64
          #   os: ubuntu-20.04
          #   target: x86_64-unknown-netbsd
          #   bin: rip
          #   name: rip-NetBSD-x86_64.tar.gz
          #   skip_tests: true
          # - os_name: Windows-aarch64
          #   os: windows-latest
          #   target: aarch64-pc-windows-msvc
          #   bin: rip.exe
          #   name: rip-Windows-aarch64.zip
          #   skip_tests: true
          - os_name: Windows-i686
            os: windows-latest
            target: i686-pc-windows-msvc
            bin: rip.exe
            name: rip-Windows-i686.zip
            skip_tests: true
          - os_name: Windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: rip.exe
            name: rip-Windows-x86_64.zip
          - os_name: macOS-x86_64
            os: macOS-latest
            target: x86_64-apple-darwin
            bin: rip
            name: rip-macOS-Darwin-x86_64.tar.gz
          - os_name: macOS-aarch64
            os: macOS-latest
            target: aarch64-apple-darwin
            bin: rip
            name: rip-macOS-Darwin-aarch64.tar.gz
            skip_tests: true
        toolchain:
          - stable
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
      - name: Install musl-tools on Linux
        run: sudo apt-get update --yes && sudo apt-get install --yes musl-tools
        if: contains(matrix.platform.name, 'musl')
      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v0
        with:
            command: "build"
            target: ${{ matrix.platform.target }}
            toolchain: ${{ matrix.toolchain }}
            args: "--locked --release"
            strip: true
      - name: Run tests
        uses: houseabsolute/actions-rust-cross@v0
        with:
            command: "test"
            target: ${{ matrix.platform.target }}
            toolchain: ${{ matrix.toolchain }}
            args: "--locked --release"
        if: ${{ !matrix.platform.skip_tests }}
      - name: Package as archive
        shell: bash
        run: |
            cd target/${{ matrix.platform.target }}/release
            if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
              7z a ../../../${{ matrix.platform.name }} ${{ matrix.platform.bin }}
            else
              tar czvf ../../../${{ matrix.platform.name }} ${{ matrix.platform.bin }}
            fi
            cd -
      - name: Publish release artifacts to GitHub release
        uses: svenstaro/upload-release-action@v2
        if: matrix.toolchain == 'stable'
        with:
          file_glob: true
          tag: ${{ needs.release-please.outputs.tag_name }}
          file: ${{ matrix.platform.name }}
          overwrite: true
